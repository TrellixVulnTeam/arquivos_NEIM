void caso_de_teste01() {
	printf(" caso de teste 1 \n");
	int m0[10][10] = {{3,   5,   5,   3,   1,   4,   4,   4,   5,   4},
	                {1,   4,   2,   1,   1,   3,   4,   5,   2,   3},
	                {1,   5,   2,   5,   5,   5,   5,   4,   1,   4},
	                {3,   3,   5,   2,   5,   2,   2,   1,   2,   1},
	                {1,   3,   1,   2,   5,   2,   1,   4,   3,   3},
	                {1,   4,   2,   4,   5,   3,   3,   4,   1,   5},
	                {4,   5,   2,   3,   1,   4,   1,   4,   1,   2},
	                {4,   1,   4,   5,   5,   1,   3,   5,   4,   5},
	                {4,   1,   5,   2,   4,   4,   5,   4,   4,   5},
	                {5,   2,   5,   2,   1,   2,   2,   3,   1,   2}};

	int m1[10][10] = {{4,   5,   1,   4,   5,   3,   4,   2,   1,   2},
	                {2,   5,   4,   4,   5,   4,   4,   1,   3,   1},
	                {4,   5,   3,   2,   2,   5,   3,   5,   3,   5},
	                {5,   3,   4,   2,   1,   3,   5,   2,   4,   2},
	                {3,   2,   1,   1,   2,   5,   1,   1,   5,   5},
	                {3,   5,   5,   3,   3,   3,   4,   5,   2,   1},
	                {1,   3,   4,   4,   2,   1,   3,   3,   2,   4},
	                {4,   2,   2,   4,   4,   1,   5,   5,   3,   1},
	                {4,   5,   2,   5,   2,   4,   5,   1,   1,   1},
	                {1,   1,   1,   1,   2,   2,   2,   4,   4,   3}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 116);
	testar(resultado[0][1], 145);
	testar(resultado[0][2], 109);
	testar(resultado[0][3], 122);
	testar(resultado[0][4], 109);
	testar(resultado[0][5], 116);
	testar(resultado[0][6], 144);
	testar(resultado[0][7], 116);
	testar(resultado[0][8], 99);
	testar(resultado[0][9], 88);
	testar(resultado[1][0], 72);
	testar(resultado[1][1], 90);
	testar(resultado[1][2], 76);
	testar(resultado[1][3], 85);
	testar(resultado[1][4], 79);
	testar(resultado[1][5], 69);
	testar(resultado[1][6], 97);
	testar(resultado[1][7], 85);
	testar(resultado[1][8], 71);
	testar(resultado[1][9], 58);
	testar(resultado[2][0], 106);
	testar(resultado[2][1], 122);
	testar(resultado[2][2], 111);
	testar(resultado[2][3], 103);
	testar(resultado[2][4], 100);
	testar(resultado[2][5], 109);
	testar(resultado[2][6], 128);
	testar(resultado[2][7], 109);
	testar(resultado[2][8], 116);
	testar(resultado[2][9], 94);
	testar(resultado[3][0], 84);
	testar(resultado[3][1], 100);
	testar(resultado[3][2], 68);
	testar(resultado[3][3], 72);
	testar(resultado[3][4], 72);
	testar(resultado[3][5], 96);
	testar(resultado[3][6], 85);
	testar(resultado[3][7], 70);
	testar(resultado[3][8], 77);
	testar(resultado[3][9], 79);
	testar(resultado[4][0], 77);
	testar(resultado[4][1], 80);
	testar(resultado[4][2], 60);
	testar(resultado[4][3], 71);
	testar(resultado[4][4], 70);
	testar(resultado[4][5], 80);
	testar(resultado[4][6], 86);
	testar(resultado[4][7], 67);
	testar(resultado[4][8], 79);
	testar(resultado[4][9], 61);
	testar(resultado[5][0], 92);
	testar(resultado[5][1], 99);
	testar(resultado[5][2], 86);
	testar(resultado[5][3], 84);
	testar(resultado[5][4], 86);
	testar(resultado[5][5], 96);
	testar(resultado[5][6], 107);
	testar(resultado[5][7], 94);
	testar(resultado[5][8], 105);
	testar(resultado[5][9], 84);
	testar(resultado[6][0], 87);
	testar(resultado[6][1], 104);
	testar(resultado[6][2], 79);
	testar(resultado[6][3], 86);
	testar(resultado[6][4], 90);
	testar(resultado[6][5], 81);
	testar(resultado[6][6], 106);
	testar(resultado[6][7], 82);
	testar(resultado[6][8], 73);
	testar(resultado[6][9], 53);
	testar(resultado[7][0], 121);
	testar(resultado[7][1], 119);
	testar(resultado[7][2], 85);
	testar(resultado[7][3], 103);
	testar(resultado[7][4], 95);
	testar(resultado[7][5], 113);
	testar(resultado[7][6], 130);
	testar(resultado[7][7], 107);
	testar(resultado[7][8], 111);
	testar(resultado[7][9], 101);
	testar(resultado[8][0], 114);
	testar(resultado[8][1], 132);
	testar(resultado[8][2], 96);
	testar(resultado[8][3], 111);
	testar(resultado[8][4], 101);
	testar(resultado[8][5], 114);
	testar(resultado[8][6], 130);
	testar(resultado[8][7], 121);
	testar(resultado[8][8], 104);
	testar(resultado[8][9], 105);
	testar(resultado[9][0], 83);
	testar(resultado[9][1], 97);
	testar(resultado[9][2], 65);
	testar(resultado[9][3], 76);
	testar(resultado[9][4], 77);
	testar(resultado[9][5], 78);
	testar(resultado[9][6], 92);
	testar(resultado[9][7], 82);
	testar(resultado[9][8], 65);
	testar(resultado[9][9], 66);


}

void caso_de_teste02() {
	printf(" caso de teste 2 \n");
	int m0[10][10] = {{2,   5,   2,   2,   1,   2,   1,   1,   5,   2},
	                {2,   1,   5,   1,   2,   5,   4,   2,   2,   2},
	                {2,   5,   1,   3,   4,   4,   2,   2,   1,   4},
	                {2,   3,   5,   5,   1,   5,   1,   1,   3,   3},
	                {4,   1,   5,   1,   2,   1,   5,   5,   4,   4},
	                {3,   1,   3,   5,   5,   1,   4,   4,   5,   1},
	                {2,   3,   3,   1,   5,   3,   2,   2,   5,   1},
	                {4,   1,   2,   3,   1,   5,   1,   2,   1,   4},
	                {5,   4,   1,   5,   5,   3,   2,   5,   1,   1},
	                {1,   4,   1,   5,   4,   5,   5,   2,   1,   1}};

	int m1[10][10] = {{1,   3,   3,   5,   1,   1,   4,   1,   3,   2},
	                {5,   3,   2,   1,   2,   2,   3,   5,   3,   5},
	                {3,   3,   1,   3,   4,   4,   3,   5,   5,   2},
	                {4,   5,   1,   1,   5,   1,   3,   5,   3,   5},
	                {1,   3,   4,   5,   5,   5,   1,   2,   2,   3},
	                {3,   4,   3,   4,   3,   3,   4,   5,   4,   3},
	                {4,   2,   2,   1,   5,   3,   2,   2,   4,   4},
	                {4,   5,   3,   2,   1,   2,   2,   3,   1,   5},
	                {3,   3,   3,   5,   3,   5,   4,   1,   2,   3},
	                {3,   5,   1,   2,   2,   5,   4,   3,   4,   3}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 77);
	testar(resultado[0][1], 80);
	testar(resultado[0][2], 52);
	testar(resultado[0][3], 68);
	testar(resultado[0][4], 66);
	testar(resultado[0][5], 73);
	testar(resultado[0][6], 76);
	testar(resultado[0][7], 75);
	testar(resultado[0][8], 70);
	testar(resultado[0][9], 82);
	testar(resultado[1][0], 79);
	testar(resultado[1][1], 89);
	testar(resultado[1][2], 59);
	testar(resultado[1][3], 79);
	testar(resultado[1][4], 86);
	testar(resultado[1][5], 86);
	testar(resultado[1][6], 79);
	testar(resultado[1][7], 88);
	testar(resultado[1][8], 91);
	testar(resultado[1][9], 83);
	testar(resultado[2][0], 89);
	testar(resultado[2][1], 104);
	testar(resultado[2][2], 65);
	testar(resultado[2][3], 76);
	testar(resultado[2][4], 86);
	testar(resultado[2][5], 86);
	testar(resultado[2][6], 83);
	testar(resultado[2][7], 98);
	testar(resultado[2][8], 87);
	testar(resultado[2][9], 103);
	testar(resultado[3][0], 94);
	testar(resultado[3][1], 109);
	testar(resultado[3][2], 58);
	testar(resultado[3][3], 82);
	testar(resultado[3][4], 94);
	testar(resultado[3][5], 88);
	testar(resultado[3][6], 96);
	testar(resultado[3][7], 111);
	testar(resultado[3][8], 100);
	testar(resultado[3][9], 99);
	testar(resultado[4][0], 97);
	testar(resultado[4][1], 112);
	testar(resultado[4][2], 72);
	testar(resultado[4][3], 94);
	testar(resultado[4][4], 94);
	testar(resultado[4][5], 105);
	testar(resultado[4][6], 95);
	testar(resultado[4][7], 89);
	testar(resultado[4][8], 100);
	testar(resultado[4][9], 106);
	testar(resultado[5][0], 95);
	testar(resultado[5][1], 113);
	testar(resultado[5][2], 78);
	testar(resultado[5][3], 98);
	testar(resultado[5][4], 111);
	testar(resultado[5][5], 100);
	testar(resultado[5][6], 88);
	testar(resultado[5][7], 91);
	testar(resultado[5][8], 90);
	testar(resultado[5][9], 114);
	testar(resultado[6][0], 78);
	testar(resultado[6][1], 90);
	testar(resultado[6][2], 71);
	testar(resultado[6][3], 93);
	testar(resultado[6][4], 88);
	testar(resultado[6][5], 95);
	testar(resultado[6][6], 78);
	testar(resultado[6][7], 80);
	testar(resultado[6][8], 79);
	testar(resultado[6][9], 90);
	testar(resultado[7][0], 70);
	testar(resultado[7][1], 94);
	testar(resultado[7][2], 53);
	testar(resultado[7][3], 73);
	testar(resultado[7][4], 67);
	testar(resultado[7][5], 69);
	testar(resultado[7][6], 81);
	testar(resultado[7][7], 82);
	testar(resultado[7][8], 80);
	testar(resultado[7][9], 79);
	testar(resultado[8][0], 96);
	testar(resultado[8][1], 119);
	testar(resultado[8][2], 81);
	testar(resultado[8][3], 93);
	testar(resultado[8][4], 96);
	testar(resultado[8][5], 82);
	testar(resultado[8][6], 89);
	testar(resultado[8][7], 103);
	testar(resultado[8][8], 88);
	testar(resultado[8][9], 120);
	testar(resultado[9][0], 97);
	testar(resultado[9][1], 103);
	testar(resultado[9][2], 68);
	testar(resultado[9][3], 73);
	testar(resultado[9][4], 105);
	testar(resultado[9][5], 82);
	testar(resultado[9][6], 80);
	testar(resultado[9][7], 104);
	testar(resultado[9][8], 91);
	testar(resultado[9][9], 112);


}

void caso_de_teste03() {
	printf(" caso de teste 3 \n");
	int m0[10][10] = {{1,   4,   1,   3,   4,   4,   1,   3,   5,   1},
	                {3,   3,   2,   3,   3,   3,   4,   1,   5,   2},
	                {4,   5,   5,   3,   4,   4,   1,   4,   3,   1},
	                {5,   1,   2,   2,   3,   5,   5,   3,   2,   1},
	                {5,   4,   3,   1,   3,   5,   4,   1,   1,   5},
	                {2,   1,   5,   2,   4,   3,   5,   1,   1,   4},
	                {3,   2,   4,   4,   3,   4,   3,   5,   3,   1},
	                {5,   5,   4,   5,   2,   3,   1,   2,   3,   3},
	                {2,   5,   4,   1,   3,   4,   5,   4,   4,   3},
	                {2,   1,   4,   3,   2,   2,   1,   1,   1,   3}};

	int m1[10][10] = {{1,   2,   4,   1,   2,   1,   3,   4,   3,   4},
	                {1,   1,   3,   3,   3,   5,   4,   1,   5,   1},
	                {1,   2,   2,   4,   3,   2,   3,   1,   5,   5},
	                {5,   2,   3,   5,   3,   4,   1,   2,   5,   3},
	                {1,   5,   4,   5,   2,   3,   1,   5,   4,   1},
	                {3,   4,   2,   1,   4,   1,   2,   4,   2,   4},
	                {3,   1,   5,   2,   1,   4,   2,   3,   1,   1},
	                {2,   3,   1,   5,   4,   4,   5,   5,   1,   3},
	                {5,   5,   3,   1,   5,   2,   4,   4,   5,   5},
	                {2,   4,   2,   1,   2,   4,   5,   3,   1,   2}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 73);
	testar(resultado[0][1], 89);
	testar(resultado[0][2], 76);
	testar(resultado[0][3], 79);
	testar(resultado[0][4], 90);
	testar(resultado[0][5], 81);
	testar(resultado[0][6], 79);
	testar(resultado[0][7], 92);
	testar(resultado[0][8], 97);
	testar(resultado[0][9], 79);
	testar(resultado[1][0], 78);
	testar(resultado[1][1], 86);
	testar(resultado[1][2], 92);
	testar(resultado[1][3], 73);
	testar(resultado[1][4], 85);
	testar(resultado[1][5], 84);
	testar(resultado[1][6], 82);
	testar(resultado[1][7], 93);
	testar(resultado[1][8], 99);
	testar(resultado[1][9], 85);
	testar(resultado[2][0], 73);
	testar(resultado[2][1], 97);
	testar(resultado[2][2], 94);
	testar(resultado[2][3], 104);
	testar(resultado[2][4], 105);
	testar(resultado[2][5], 97);
	testar(resultado[2][6], 101);
	testar(resultado[2][7], 106);
	testar(resultado[2][8], 122);
	testar(resultado[2][9], 105);
	testar(resultado[3][0], 69);
	testar(resultado[3][1], 82);
	testar(resultado[3][2], 91);
	testar(resultado[3][3], 74);
	testar(resultado[3][4], 80);
	testar(resultado[3][5], 76);
	testar(resultado[3][6], 78);
	testar(resultado[3][7], 103);
	testar(resultado[3][8], 81);
	testar(resultado[3][9], 86);
	testar(resultado[4][0], 64);
	testar(resultado[4][1], 89);
	testar(resultado[4][2], 97);
	testar(resultado[4][3], 73);
	testar(resultado[4][4], 83);
	testar(resultado[4][5], 91);
	testar(resultado[4][6], 96);
	testar(resultado[4][7], 100);
	testar(resultado[4][8], 92);
	testar(resultado[4][9], 87);
	testar(resultado[5][0], 61);
	testar(resultado[5][1], 80);
	testar(resultado[5][2], 86);
	testar(resultado[5][3], 78);
	testar(resultado[5][4], 70);
	testar(resultado[5][5], 82);
	testar(resultado[5][6], 76);
	testar(resultado[5][7], 86);
	testar(resultado[5][8], 83);
	testar(resultado[5][9], 77);
	testar(resultado[6][0], 80);
	testar(resultado[6][1], 92);
	testar(resultado[6][2], 89);
	testar(resultado[6][3], 99);
	testar(resultado[6][4], 98);
	testar(resultado[6][5], 92);
	testar(resultado[6][6], 92);
	testar(resultado[6][7], 106);
	testar(resultado[6][8], 103);
	testar(resultado[6][9], 100);
	testar(resultado[7][0], 78);
	testar(resultado[7][1], 89);
	testar(resultado[7][2], 94);
	testar(resultado[7][3], 92);
	testar(resultado[7][4], 98);
	testar(resultado[7][5], 97);
	testar(resultado[7][6], 99);
	testar(resultado[7][7], 95);
	testar(resultado[7][8], 120);
	testar(resultado[7][9], 102);
	testar(resultado[8][0], 80);
	testar(resultado[8][1], 99);
	testar(resultado[8][2], 101);
	testar(resultado[8][3], 94);
	testar(resultado[8][4], 103);
	testar(resultado[8][5], 108);
	testar(resultado[8][6], 111);
	testar(resultado[8][7], 110);
	testar(resultado[8][8], 108);
	testar(resultado[8][9], 98);
	testar(resultado[9][0], 46);
	testar(resultado[9][1], 58);
	testar(resultado[9][2], 55);
	testar(resultado[9][3], 59);
	testar(resultado[9][4], 56);
	testar(resultado[9][5], 57);
	testar(resultado[9][6], 57);
	testar(resultado[9][7], 58);
	testar(resultado[9][8], 68);
	testar(resultado[9][9], 63);


}

void caso_de_teste04() {
	printf(" caso de teste 4 \n");
	int m0[10][10] = {{3,   1,   3,   1,   3,   1,   1,   2,   1,   3},
	                {5,   1,   4,   5,   2,   1,   1,   4,   5,   5},
	                {4,   4,   2,   4,   1,   1,   4,   1,   3,   3},
	                {2,   2,   3,   1,   3,   1,   3,   5,   2,   3},
	                {3,   3,   5,   3,   4,   2,   3,   5,   2,   5},
	                {1,   1,   3,   4,   1,   4,   1,   1,   4,   5},
	                {3,   2,   2,   5,   4,   1,   2,   1,   2,   5},
	                {5,   1,   2,   5,   3,   3,   3,   1,   4,   4},
	                {2,   4,   1,   4,   2,   1,   2,   2,   1,   2},
	                {1,   3,   3,   4,   5,   1,   1,   3,   3,   5}};

	int m1[10][10] = {{4,   4,   4,   3,   4,   3,   3,   2,   1,   1},
	                {3,   4,   3,   2,   2,   2,   3,   3,   5,   1},
	                {4,   4,   3,   3,   3,   2,   4,   1,   4,   5},
	                {4,   4,   3,   5,   2,   3,   4,   4,   4,   4},
	                {1,   3,   4,   3,   4,   5,   2,   3,   4,   3},
	                {3,   2,   1,   5,   1,   5,   3,   5,   1,   3},
	                {1,   1,   2,   3,   2,   5,   2,   5,   5,   2},
	                {3,   5,   4,   1,   4,   2,   2,   2,   1,   5},
	                {4,   3,   1,   1,   4,   4,   1,   2,   5,   3},
	                {1,   5,   5,   2,   4,   2,   1,   5,   3,   5}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 51);
	testar(resultado[0][1], 72);
	testar(resultado[0][2], 66);
	testar(resultado[0][3], 51);
	testar(resultado[0][4], 64);
	testar(resultado[0][5], 59);
	testar(resultado[0][6], 47);
	testar(resultado[0][7], 56);
	testar(resultado[0][8], 58);
	testar(resultado[0][9], 65);
	testar(resultado[1][0], 102);
	testar(resultado[1][1], 129);
	testar(resultado[1][2], 107);
	testar(resultado[1][3], 87);
	testar(resultado[1][4], 111);
	testar(resultado[1][5], 98);
	testar(resultado[1][6], 81);
	testar(resultado[1][7], 96);
	testar(resultado[1][8], 104);
	testar(resultado[1][9], 117);
	testar(resultado[2][0], 78);
	testar(resultado[2][1], 94);
	testar(resultado[2][2], 81);
	testar(resultado[2][3], 76);
	testar(resultado[2][4], 79);
	testar(resultado[2][5], 86);
	testar(resultado[2][6], 69);
	testar(resultado[2][7], 89);
	testar(resultado[2][8], 98);
	testar(resultado[2][9], 77);
	testar(resultado[3][0], 65);
	testar(resultado[3][1], 92);
	testar(resultado[3][2], 82);
	testar(resultado[3][3], 60);
	testar(resultado[3][4], 82);
	testar(resultado[3][5], 78);
	testar(resultado[3][6], 58);
	testar(resultado[3][7], 75);
	testar(resultado[3][8], 80);
	testar(resultado[3][9], 87);
	testar(resultado[4][0], 94);
	testar(resultado[4][1], 131);
	testar(resultado[4][2], 116);
	testar(resultado[4][3], 93);
	testar(resultado[4][4], 111);
	testar(resultado[4][5], 107);
	testar(resultado[4][6], 87);
	testar(resultado[4][7], 108);
	testar(resultado[4][8], 113);
	testar(resultado[4][9], 123);
	testar(resultado[5][0], 73);
	testar(resultado[5][1], 90);
	testar(resultado[5][2], 71);
	testar(resultado[5][3], 75);
	testar(resultado[5][4], 73);
	testar(resultado[5][5], 81);
	testar(resultado[5][6], 61);
	testar(resultado[5][7], 87);
	testar(resultado[5][8], 83);
	testar(resultado[5][9], 92);
	testar(resultado[6][0], 71);
	testar(resultado[6][1], 100);
	testar(resultado[6][2], 91);
	testar(resultado[6][3], 80);
	testar(resultado[6][4], 85);
	testar(resultado[6][5], 87);
	testar(resultado[6][6], 67);
	testar(resultado[6][7], 92);
	testar(resultado[6][8], 94);
	testar(resultado[6][9], 90);
	testar(resultado[7][0], 89);
	testar(resultado[7][1], 107);
	testar(resultado[7][2], 93);
	testar(resultado[7][3], 94);
	testar(resultado[7][4], 95);
	testar(resultado[7][5], 107);
	testar(resultado[7][6], 77);
	testar(resultado[7][7], 104);
	testar(resultado[7][8], 101);
	testar(resultado[7][9], 97);
	testar(resultado[8][0], 59);
	testar(resultado[8][1], 77);
	testar(resultado[8][2], 67);
	testar(resultado[8][3], 61);
	testar(resultado[8][4], 60);
	testar(resultado[8][5], 65);
	testar(resultado[8][6], 56);
	testar(resultado[8][7], 70);
	testar(resultado[8][8], 74);
	testar(resultado[8][9], 63);
	testar(resultado[9][0], 76);
	testar(resultado[9][1], 111);
	testar(resultado[9][2], 97);
	testar(resultado[9][3], 77);
	testar(resultado[9][4], 94);
	testar(resultado[9][5], 90);
	testar(resultado[9][6], 69);
	testar(resultado[9][7], 92);
	testar(resultado[9][8], 103);
	testar(resultado[9][9], 104);


}

void caso_de_teste05() {
	printf(" caso de teste 5 \n");
	int m0[10][10] = {{1,   5,   1,   2,   4,   3,   4,   5,   2,   5},
	                {1,   3,   4,   1,   1,   1,   5,   4,   1,   3},
	                {1,   3,   5,   5,   2,   3,   3,   3,   3,   3},
	                {1,   3,   2,   1,   5,   3,   5,   5,   2,   3},
	                {2,   2,   5,   5,   5,   5,   5,   1,   5,   2},
	                {5,   2,   4,   5,   1,   2,   4,   1,   2,   2},
	                {3,   2,   4,   1,   2,   5,   3,   3,   5,   2},
	                {5,   3,   5,   2,   2,   1,   3,   1,   3,   3},
	                {5,   3,   4,   3,   2,   2,   5,   5,   4,   1},
	                {1,   3,   4,   2,   5,   2,   1,   5,   4,   2}};

	int m1[10][10] = {{3,   3,   1,   4,   3,   4,   4,   5,   4,   1},
	                {5,   4,   2,   1,   1,   5,   1,   4,   1,   1},
	                {5,   2,   1,   5,   5,   4,   4,   1,   1,   4},
	                {3,   5,   1,   5,   5,   5,   3,   3,   5,   2},
	                {3,   4,   2,   1,   1,   3,   1,   3,   3,   3},
	                {3,   5,   4,   3,   4,   5,   3,   5,   5,   5},
	                {3,   2,   4,   1,   3,   3,   5,   1,   1,   1},
	                {4,   5,   1,   5,   1,   1,   4,   3,   4,   4},
	                {5,   3,   5,   1,   1,   5,   5,   5,   4,   5},
	                {5,   4,   3,   5,   4,   1,   3,   5,   3,   5}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 127);
	testar(resultado[0][1], 125);
	testar(resultado[0][2], 80);
	testar(resultado[0][3], 93);
	testar(resultado[0][4], 78);
	testar(resultado[0][5], 102);
	testar(resultado[0][6], 97);
	testar(resultado[0][7], 113);
	testar(resultado[0][8], 94);
	testar(resultado[0][9], 100);
	testar(resultado[1][0], 98);
	testar(resultado[1][1], 82);
	testar(resultado[1][2], 56);
	testar(resultado[1][3], 77);
	testar(resultado[1][4], 68);
	testar(resultado[1][5], 75);
	testar(resultado[1][6], 85);
	testar(resultado[1][7], 69);
	testar(resultado[1][8], 58);
	testar(resultado[1][9], 71);
	testar(resultado[2][0], 124);
	testar(resultado[2][1], 115);
	testar(resultado[2][2], 72);
	testar(resultado[2][3], 104);
	testar(resultado[2][4], 97);
	testar(resultado[2][5], 115);
	testar(resultado[2][6], 104);
	testar(resultado[2][7], 100);
	testar(resultado[2][8], 94);
	testar(resultado[2][9], 100);
	testar(resultado[3][0], 115);
	testar(resultado[3][1], 112);
	testar(resultado[3][2], 76);
	testar(resultado[3][3], 83);
	testar(resultado[3][4], 72);
	testar(resultado[3][5], 95);
	testar(resultado[3][6], 96);
	testar(resultado[3][7], 97);
	testar(resultado[3][8], 86);
	testar(resultado[3][9], 94);
	testar(resultado[4][0], 140);
	testar(resultado[4][1], 132);
	testar(resultado[4][2], 98);
	testar(resultado[4][3], 105);
	testar(resultado[4][4], 112);
	testar(resultado[4][5], 146);
	testar(resultado[4][6], 125);
	testar(resultado[4][7], 121);
	testar(resultado[4][8], 115);
	testar(resultado[4][9], 118);
	testar(resultado[5][0], 105);
	testar(resultado[5][1], 97);
	testar(resultado[5][2], 61);
	testar(resultado[5][3], 95);
	testar(resultado[5][4], 94);
	testar(resultado[5][5], 109);
	testar(resultado[5][6], 100);
	testar(resultado[5][7], 92);
	testar(resultado[5][8], 86);
	testar(resultado[5][9], 74);
	testar(resultado[6][0], 119);
	testar(resultado[6][1], 107);
	testar(resultado[6][2], 82);
	testar(resultado[6][3], 89);
	testar(resultado[6][4], 83);
	testar(resultado[6][5], 113);
	testar(resultado[6][6], 108);
	testar(resultado[6][7], 108);
	testar(resultado[6][8], 95);
	testar(resultado[6][9], 104);
	testar(resultado[7][0], 113);
	testar(resultado[7][1], 92);
	testar(resultado[7][2], 63);
	testar(resultado[7][3], 89);
	testar(resultado[7][4], 84);
	testar(resultado[7][5], 104);
	testar(resultado[7][6], 97);
	testar(resultado[7][7], 95);
	testar(resultado[7][8], 77);
	testar(resultado[7][9], 80);
	testar(resultado[8][0], 131);
	testar(resultado[8][1], 119);
	testar(resultado[8][2], 78);
	testar(resultado[8][3], 105);
	testar(resultado[8][4], 91);
	testar(resultado[8][5], 123);
	testar(resultado[8][6], 124);
	testar(resultado[8][7], 111);
	testar(resultado[8][8], 102);
	testar(resultado[8][9], 96);
	testar(resultado[9][0], 118);
	testar(resultado[9][1], 110);
	testar(resultado[9][2], 66);
	testar(resultado[9][3], 88);
	testar(resultado[9][4], 69);
	testar(resultado[9][5], 100);
	testar(resultado[9][6], 91);
	testar(resultado[9][7], 98);
	testar(resultado[9][8], 89);
	testar(resultado[9][9], 100);


}

void caso_de_teste06() {
	printf(" caso de teste 6 \n");
	int m0[10][10] = {{5,   3,   4,   4,   3,   5,   5,   1,   3,   2},
	                {2,   3,   3,   1,   4,   5,   4,   3,   1,   4},
	                {3,   1,   4,   3,   5,   2,   3,   4,   4,   5},
	                {2,   1,   2,   3,   1,   2,   4,   2,   2,   3},
	                {3,   3,   5,   3,   5,   5,   4,   4,   2,   4},
	                {2,   2,   5,   2,   4,   1,   3,   1,   4,   4},
	                {2,   2,   4,   4,   1,   1,   2,   4,   2,   5},
	                {2,   2,   2,   3,   4,   3,   3,   2,   1,   1},
	                {3,   4,   4,   2,   1,   5,   4,   5,   2,   4},
	                {5,   4,   5,   3,   4,   1,   5,   5,   1,   4}};

	int m1[10][10] = {{4,   2,   3,   3,   3,   3,   5,   3,   2,   3},
	                {4,   5,   3,   4,   4,   3,   4,   1,   1,   1},
	                {1,   5,   5,   4,   3,   3,   3,   5,   2,   4},
	                {2,   2,   5,   4,   5,   2,   3,   4,   1,   4},
	                {3,   4,   3,   1,   2,   4,   3,   2,   4,   5},
	                {4,   2,   1,   3,   2,   4,   3,   5,   5,   1},
	                {3,   1,   2,   5,   5,   3,   3,   2,   4,   4},
	                {3,   1,   4,   2,   1,   3,   5,   5,   4,   1},
	                {5,   5,   2,   5,   2,   5,   3,   1,   1,   2},
	                {1,   4,   3,   5,   5,   4,   2,   2,   2,   5}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 108);
	testar(resultado[0][1], 104);
	testar(resultado[0][2], 104);
	testar(resultado[0][3], 129);
	testar(resultado[0][4], 117);
	testar(resultado[0][5], 117);
	testar(resultado[0][6], 118);
	testar(resultado[0][7], 107);
	testar(resultado[0][8], 93);
	testar(resultado[0][9], 107);
	testar(resultado[1][0], 87);
	testar(resultado[1][1], 90);
	testar(resultado[1][2], 86);
	testar(resultado[1][3], 104);
	testar(resultado[1][4], 95);
	testar(resultado[1][5], 104);
	testar(resultado[1][6], 99);
	testar(resultado[1][7], 93);
	testar(resultado[1][8], 92);
	testar(resultado[1][9], 91);
	testar(resultado[2][0], 95);
	testar(resultado[2][1], 108);
	testar(resultado[2][2], 109);
	testar(resultado[2][3], 120);
	testar(resultado[2][4], 106);
	testar(resultado[2][5], 119);
	testar(resultado[2][6], 112);
	testar(resultado[2][7], 102);
	testar(resultado[2][8], 90);
	testar(resultado[2][9], 114);
	testar(resultado[3][0], 62);
	testar(resultado[3][1], 61);
	testar(resultado[3][2], 68);
	testar(resultado[3][3], 86);
	testar(resultado[3][4], 78);
	testar(resultado[3][5], 73);
	testar(resultado[3][6], 72);
	testar(resultado[3][7], 67);
	testar(resultado[3][8], 58);
	testar(resultado[3][9], 71);
	testar(resultado[4][0], 108);
	testar(resultado[4][1], 116);
	testar(resultado[4][2], 118);
	testar(resultado[4][3], 131);
	testar(resultado[4][4], 119);
	testar(resultado[4][5], 129);
	testar(resultado[4][6], 127);
	testar(resultado[4][7], 122);
	testar(resultado[4][8], 109);
	testar(resultado[4][9], 118);
	testar(resultado[5][0], 77);
	testar(resultado[5][1], 101);
	testar(resultado[5][2], 90);
	testar(resultado[5][3], 106);
	testar(resultado[5][4], 93);
	testar(resultado[5][5], 99);
	testar(resultado[5][6], 88);
	testar(resultado[5][7], 77);
	testar(resultado[5][8], 67);
	testar(resultado[5][9], 98);
	testar(resultado[6][0], 68);
	testar(resultado[6][1], 84);
	testar(resultado[6][2], 95);
	testar(resultado[6][3], 103);
	testar(resultado[6][4], 93);
	testar(resultado[6][5], 88);
	testar(resultado[6][6], 90);
	testar(resultado[6][7], 87);
	testar(resultado[6][8], 63);
	testar(resultado[6][9], 87);
	testar(resultado[7][0], 69);
	testar(resultado[7][1], 66);
	testar(resultado[7][2], 71);
	testar(resultado[7][3], 76);
	testar(resultado[7][4], 73);
	testar(resultado[7][5], 76);
	testar(resultado[7][6], 78);
	testar(resultado[7][7], 72);
	testar(resultado[7][8], 67);
	testar(resultado[7][9], 72);
	testar(resultado[8][0], 100);
	testar(resultado[8][1], 99);
	testar(resultado[8][2], 103);
	testar(resultado[8][3], 125);
	testar(resultado[8][4], 108);
	testar(resultado[8][5], 114);
	testar(resultado[8][6], 118);
	testar(resultado[8][7], 111);
	testar(resultado[8][8], 95);
	testar(resultado[8][9], 92);
	testar(resultado[9][0], 102);
	testar(resultado[9][1], 110);
	testar(resultado[9][2], 124);
	testar(resultado[9][3], 130);
	testar(resultado[9][4], 123);
	testar(resultado[9][5], 119);
	testar(resultado[9][6], 131);
	testar(resultado[9][7], 113);
	testar(resultado[9][8], 97);
	testar(resultado[9][9], 119);


}

void caso_de_teste07() {
	printf(" caso de teste 7 \n");
	int m0[10][10] = {{2,   5,   1,   3,   5,   2,   4,   2,   1,   3},
	                {2,   1,   4,   2,   3,   2,   3,   2,   4,   3},
	                {4,   3,   5,   2,   5,   4,   5,   2,   5,   5},
	                {5,   4,   1,   1,   3,   1,   2,   1,   4,   5},
	                {3,   3,   5,   3,   1,   5,   5,   3,   1,   3},
	                {1,   4,   3,   2,   1,   2,   1,   2,   4,   2},
	                {3,   5,   5,   5,   5,   3,   2,   4,   5,   1},
	                {3,   3,   3,   2,   5,   5,   3,   1,   3,   4},
	                {1,   5,   2,   3,   1,   4,   4,   3,   2,   4},
	                {5,   4,   4,   1,   4,   5,   3,   5,   3,   3}};

	int m1[10][10] = {{4,   4,   5,   5,   3,   5,   1,   4,   4,   2},
	                {5,   1,   1,   1,   1,   2,   5,   5,   1,   4},
	                {3,   4,   5,   5,   3,   4,   5,   4,   1,   2},
	                {2,   1,   2,   1,   5,   4,   3,   2,   4,   1},
	                {3,   5,   2,   3,   2,   4,   1,   1,   1,   4},
	                {5,   5,   2,   1,   4,   1,   1,   5,   1,   1},
	                {1,   2,   1,   5,   5,   2,   3,   4,   3,   4},
	                {1,   3,   3,   4,   2,   2,   3,   3,   2,   3},
	                {3,   3,   4,   1,   1,   2,   2,   1,   3,   2},
	                {4,   5,   1,   1,   4,   2,   5,   4,   5,   4}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 88);
	testar(resultado[0][1], 87);
	testar(resultado[0][2], 57);
	testar(resultado[0][3], 72);
	testar(resultado[0][4], 84);
	testar(resultado[0][5], 78);
	testar(resultado[0][6], 83);
	testar(resultado[0][7], 93);
	testar(resultado[0][8], 67);
	testar(resultado[0][9], 87);
	testar(resultado[1][0], 77);
	testar(resultado[1][1], 91);
	testar(resultado[1][2], 73);
	testar(resultado[1][3], 74);
	testar(resultado[1][4], 78);
	testar(resultado[1][5], 74);
	testar(resultado[1][6], 76);
	testar(resultado[1][7], 80);
	testar(resultado[1][8], 66);
	testar(resultado[1][9], 70);
	testar(resultado[2][0], 127);
	testar(resultado[2][1], 142);
	testar(resultado[2][2], 106);
	testar(resultado[2][3], 112);
	testar(resultado[2][4], 120);
	testar(resultado[2][5], 112);
	testar(resultado[2][6], 115);
	testar(resultado[2][7], 131);
	testar(resultado[2][8], 100);
	testar(resultado[2][9], 112);
	testar(resultado[3][0], 94);
	testar(resultado[3][1], 93);
	testar(resultado[3][2], 70);
	testar(resultado[3][3], 68);
	testar(resultado[3][4], 73);
	testar(resultado[3][5], 78);
	testar(resultado[3][6], 79);
	testar(resultado[3][7], 89);
	testar(resultado[3][8], 78);
	testar(resultado[3][9], 81);
	testar(resultado[4][0], 99);
	testar(resultado[4][1], 105);
	testar(resultado[4][2], 82);
	testar(resultado[4][3], 95);
	testar(resultado[4][4], 108);
	testar(resultado[4][5], 86);
	testar(resultado[4][6], 99);
	testar(resultado[4][7], 121);
	testar(resultado[4][8], 77);
	testar(resultado[4][9], 83);
	testar(resultado[5][0], 73);
	testar(resultado[5][1], 67);
	testar(resultado[5][2], 59);
	testar(resultado[5][3], 50);
	testar(resultado[5][4], 57);
	testar(resultado[5][5], 57);
	testar(resultado[5][6], 72);
	testar(resultado[5][7], 73);
	testar(resultado[5][8], 51);
	testar(resultado[5][9], 58);
	testar(resultado[6][0], 117);
	testar(resultado[6][1], 118);
	testar(resultado[6][2], 106);
	testar(resultado[6][3], 100);
	testar(resultado[6][4], 103);
	testar(resultado[6][5], 112);
	testar(resultado[6][6], 109);
	testar(resultado[6][7], 116);
	testar(resultado[6][8], 84);
	testar(resultado[6][9], 98);
	testar(resultado[7][0], 109);
	testar(resultado[7][1], 117);
	testar(resultado[7][2], 79);
	testar(resultado[7][3], 81);
	testar(resultado[7][4], 97);
	testar(resultado[7][5], 88);
	testar(resultado[7][6], 87);
	testar(resultado[7][7], 107);
	testar(resultado[7][8], 76);
	testar(resultado[7][9], 88);
	testar(resultado[8][0], 93);
	testar(resultado[8][1], 88);
	testar(resultado[8][2], 61);
	testar(resultado[8][3], 68);
	testar(resultado[8][4], 91);
	testar(resultado[8][5], 69);
	testar(resultado[8][6], 95);
	testar(resultado[8][7], 107);
	testar(resultado[8][8], 72);
	testar(resultado[8][9], 82);
	testar(resultado[9][0], 120);
	testar(resultado[9][1], 131);
	testar(resultado[9][2], 102);
	testar(resultado[9][3], 108);
	testar(resultado[9][4], 104);
	testar(resultado[9][5], 102);
	testar(resultado[9][6], 102);
	testar(resultado[9][7], 129);
	testar(resultado[9][8], 84);
	testar(resultado[9][9], 101);


}

void caso_de_teste08() {
	printf(" caso de teste 8 \n");
	int m0[10][10] = {{1,   1,   2,   4,   5,   3,   2,   3,   2,   1},
	                {1,   3,   4,   3,   4,   5,   1,   5,   4,   4},
	                {2,   2,   5,   3,   1,   1,   1,   1,   2,   4},
	                {5,   4,   2,   1,   2,   3,   3,   3,   5,   1},
	                {1,   3,   5,   4,   2,   4,   3,   2,   5,   3},
	                {5,   2,   5,   2,   4,   2,   4,   1,   2,   5},
	                {2,   1,   4,   5,   3,   2,   2,   1,   2,   4},
	                {3,   4,   1,   3,   4,   2,   3,   4,   1,   4},
	                {1,   2,   2,   2,   5,   3,   4,   3,   3,   2},
	                {5,   1,   5,   5,   5,   2,   3,   2,   4,   1}};

	int m1[10][10] = {{5,   4,   3,   1,   5,   2,   2,   5,   2,   4},
	                {3,   3,   3,   4,   2,   3,   2,   3,   5,   4},
	                {1,   3,   3,   3,   1,   3,   2,   1,   4,   2},
	                {5,   3,   2,   3,   5,   1,   1,   1,   2,   4},
	                {4,   1,   2,   3,   4,   5,   2,   5,   4,   1},
	                {1,   5,   3,   5,   2,   5,   2,   5,   5,   2},
	                {3,   5,   4,   4,   4,   3,   1,   1,   1,   4},
	                {4,   1,   4,   2,   4,   5,   4,   5,   1,   2},
	                {3,   3,   1,   2,   3,   4,   2,   1,   5,   1},
	                {3,   4,   2,   3,   4,   2,   3,   1,   2,   3}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 80);
	testar(resultado[0][1], 68);
	testar(resultado[0][2], 63);
	testar(resultado[0][3], 74);
	testar(resultado[0][4], 85);
	testar(resultado[0][5], 86);
	testar(resultado[0][6], 49);
	testar(resultado[0][7], 74);
	testar(resultado[0][8], 75);
	testar(resultado[0][9], 58);
	testar(resultado[1][0], 101);
	testar(resultado[1][1], 101);
	testar(resultado[1][2], 89);
	testar(resultado[1][3], 105);
	testar(resultado[1][4], 108);
	testar(resultado[1][5], 123);
	testar(resultado[1][6], 78);
	testar(resultado[1][7], 100);
	testar(resultado[1][8], 114);
	testar(resultado[1][9], 80);
	testar(resultado[2][0], 66);
	testar(resultado[2][1], 72);
	testar(resultado[2][2], 56);
	testar(resultado[2][3], 64);
	testar(resultado[2][4], 70);
	testar(resultado[2][5], 62);
	testar(resultado[2][6], 46);
	testar(resultado[2][7], 46);
	testar(resultado[2][8], 69);
	testar(resultado[2][9], 61);
	testar(resultado[3][0], 94);
	testar(resultado[3][1], 95);
	testar(resultado[3][2], 79);
	testar(resultado[3][3], 82);
	testar(resultado[3][4], 97);
	testar(resultado[3][5], 100);
	testar(resultado[3][6], 61);
	testar(resultado[3][7], 89);
	testar(resultado[3][8], 96);
	testar(resultado[3][9], 78);
	testar(resultado[4][0], 92);
	testar(resultado[4][1], 106);
	testar(resultado[4][2], 82);
	testar(resultado[4][3], 101);
	testar(resultado[4][4], 99);
	testar(resultado[4][5], 105);
	testar(resultado[4][6], 64);
	testar(resultado[4][7], 74);
	testar(resultado[4][8], 109);
	testar(resultado[4][9], 82);
	testar(resultado[5][0], 101);
	testar(resultado[5][1], 108);
	testar(resultado[5][2], 86);
	testar(resultado[5][3], 93);
	testar(resultado[5][4], 110);
	testar(resultado[5][5], 98);
	testar(resultado[5][6], 65);
	testar(resultado[5][7], 84);
	testar(resultado[5][8], 95);
	testar(resultado[5][9], 89);
	testar(resultado[6][0], 84);
	testar(resultado[6][1], 84);
	testar(resultado[6][2], 65);
	testar(resultado[6][3], 78);
	testar(resultado[6][4], 91);
	testar(resultado[6][5], 76);
	testar(resultado[6][6], 51);
	testar(resultado[6][7], 60);
	testar(resultado[6][8], 78);
	testar(resultado[6][9], 71);
	testar(resultado[7][0], 101);
	testar(resultado[7][1], 88);
	testar(resultado[7][2], 81);
	testar(resultado[7][3], 87);
	testar(resultado[7][4], 106);
	testar(resultado[7][5], 95);
	testar(resultado[7][6], 64);
	testar(resultado[7][7], 89);
	testar(resultado[7][8], 82);
	testar(resultado[7][9], 83);
	testar(resultado[8][0], 85);
	testar(resultado[8][1], 82);
	testar(resultado[8][2], 73);
	testar(resultado[8][3], 85);
	testar(resultado[8][4], 92);
	testar(resultado[8][5], 99);
	testar(resultado[8][6], 56);
	testar(resultado[8][7], 79);
	testar(resultado[8][8], 85);
	testar(resultado[8][9], 66);
	testar(resultado[9][0], 112);
	testar(resultado[9][1], 101);
	testar(resultado[9][2], 85);
	testar(resultado[9][3], 91);
	testar(resultado[9][4], 117);
	testar(resultado[9][5], 105);
	testar(resultado[9][6], 63);
	testar(resultado[9][7], 91);
	testar(resultado[9][8], 102);
	testar(resultado[9][9], 86);


}

void caso_de_teste09() {
	printf(" caso de teste 9 \n");
	int m0[10][10] = {{5,   5,   1,   2,   5,   2,   3,   3,   5,   2},
	                {2,   2,   4,   4,   2,   3,   4,   1,   3,   4},
	                {2,   3,   1,   2,   1,   1,   4,   2,   2,   2},
	                {5,   3,   4,   5,   1,   3,   1,   1,   2,   5},
	                {2,   4,   1,   5,   4,   5,   4,   3,   5,   3},
	                {3,   3,   5,   5,   5,   5,   2,   5,   2,   4},
	                {2,   1,   1,   5,   3,   4,   4,   3,   4,   5},
	                {5,   5,   5,   2,   2,   4,   1,   2,   3,   3},
	                {5,   5,   5,   4,   1,   1,   1,   3,   1,   4},
	                {1,   4,   1,   3,   5,   3,   1,   3,   3,   4}};

	int m1[10][10] = {{5,   5,   3,   1,   1,   2,   3,   2,   4,   3},
	                {1,   3,   4,   2,   5,   3,   2,   3,   5,   4},
	                {4,   3,   2,   5,   1,   2,   4,   1,   5,   5},
	                {5,   1,   2,   2,   1,   2,   3,   3,   5,   4},
	                {2,   5,   3,   5,   1,   2,   5,   5,   5,   4},
	                {3,   5,   3,   5,   2,   4,   3,   5,   1,   4},
	                {1,   5,   1,   2,   1,   1,   1,   1,   1,   5},
	                {1,   2,   2,   5,   4,   4,   1,   3,   3,   2},
	                {3,   1,   4,   5,   2,   5,   5,   1,   4,   1},
	                {2,   1,   5,   2,   3,   3,   5,   5,   5,   5}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 85);
	testar(resultado[0][1], 108);
	testar(resultado[0][2], 101);
	testar(resultado[0][3], 109);
	testar(resultado[0][4], 73);
	testar(resultado[0][5], 95);
	testar(resultado[0][6], 107);
	testar(resultado[0][7], 94);
	testar(resultado[0][8], 129);
	testar(resultado[0][9], 112);
	testar(resultado[1][0], 83);
	testar(resultado[1][1], 86);
	testar(resultado[1][2], 83);
	testar(resultado[1][3], 95);
	testar(resultado[1][4], 54);
	testar(resultado[1][5], 77);
	testar(resultado[1][6], 97);
	testar(resultado[1][7], 81);
	testar(resultado[1][8], 110);
	testar(resultado[1][9], 115);
	testar(resultado[2][0], 48);
	testar(resultado[2][1], 62);
	testar(resultado[2][2], 56);
	testar(resultado[2][3], 59);
	testar(resultado[2][4], 45);
	testar(resultado[2][5], 53);
	testar(resultado[2][6], 56);
	testar(resultado[2][7], 52);
	testar(resultado[2][8], 72);
	testar(resultado[2][9], 75);
	testar(resultado[3][0], 98);
	testar(resultado[3][1], 85);
	testar(resultado[3][2], 93);
	testar(resultado[3][3], 88);
	testar(resultado[3][4], 60);
	testar(resultado[3][5], 81);
	testar(resultado[3][6], 103);
	testar(resultado[3][7], 89);
	testar(resultado[3][8], 125);
	testar(resultado[3][9], 117);
	testar(resultado[4][0], 94);
	testar(resultado[4][1], 109);
	testar(resultado[4][2], 106);
	testar(resultado[4][3], 124);
	testar(resultado[4][4], 77);
	testar(resultado[4][5], 106);
	testar(resultado[4][6], 115);
	testar(resultado[4][7], 110);
	testar(resultado[4][8], 131);
	testar(resultado[4][9], 129);
	testar(resultado[5][0], 109);
	testar(resultado[5][1], 120);
	testar(resultado[5][2], 111);
	testar(resultado[5][3], 141);
	testar(resultado[5][4], 81);
	testar(resultado[5][5], 109);
	testar(resultado[5][6], 127);
	testar(resultado[5][7], 124);
	testar(resultado[5][8], 152);
	testar(resultado[5][9], 148);
	testar(resultado[6][0], 87);
	testar(resultado[6][1], 91);
	testar(resultado[6][2], 94);
	testar(resultado[6][3], 107);
	testar(resultado[6][4], 63);
	testar(resultado[6][5], 92);
	testar(resultado[6][6], 106);
	testar(resultado[6][7], 100);
	testar(resultado[6][8], 116);
	testar(resultado[6][9], 118);
	testar(resultado[7][0], 94);
	testar(resultado[7][1], 102);
	testar(resultado[7][2], 99);
	testar(resultado[7][3], 107);
	testar(resultado[7][4], 71);
	testar(resultado[7][5], 92);
	testar(resultado[7][6], 106);
	testar(resultado[7][7], 91);
	testar(resultado[7][8], 128);
	testar(resultado[7][9], 119);
	testar(resultado[8][0], 90);
	testar(resultado[8][1], 85);
	testar(resultado[8][2], 90);
	testar(resultado[8][3], 88);
	testar(resultado[8][4], 69);
	testar(resultado[8][5], 79);
	testar(resultado[8][6], 94);
	testar(resultado[8][7], 83);
	testar(resultado[8][8], 130);
	testar(resultado[8][9], 116);
	testar(resultado[9][0], 68);
	testar(resultado[9][1], 81);
	testar(resultado[9][2], 90);
	testar(resultado[9][3], 100);
	testar(resultado[9][4], 67);
	testar(resultado[9][5], 84);
	testar(resultado[9][6], 97);
	testar(resultado[9][7], 97);
	testar(resultado[9][8], 114);
	testar(resultado[9][9], 102);


}

void caso_de_teste010() {
	printf(" caso de teste 10 \n");
	int m0[10][10] = {{4,   5,   4,   5,   3,   1,   4,   4,   2,   2},
	                {3,   1,   5,   5,   5,   3,   1,   1,   2,   2},
	                {5,   1,   2,   5,   2,   2,   1,   3,   2,   2},
	                {4,   1,   3,   2,   5,   5,   4,   5,   1,   1},
	                {2,   5,   3,   3,   5,   3,   5,   2,   3,   3},
	                {3,   2,   3,   1,   1,   2,   2,   1,   1,   3},
	                {2,   4,   5,   4,   3,   1,   5,   1,   1,   5},
	                {3,   4,   5,   1,   1,   4,   3,   2,   2,   2},
	                {4,   4,   3,   3,   4,   3,   1,   5,   5,   1},
	                {4,   3,   2,   4,   1,   1,   4,   2,   1,   4}};

	int m1[10][10] = {{2,   3,   5,   1,   2,   3,   2,   1,   1,   1},
	                {5,   3,   1,   4,   4,   1,   4,   4,   4,   1},
	                {5,   3,   1,   3,   1,   4,   2,   1,   5,   2},
	                {3,   1,   2,   4,   4,   3,   3,   5,   5,   5},
	                {5,   5,   4,   2,   5,   5,   2,   5,   3,   1},
	                {1,   5,   5,   3,   2,   1,   2,   5,   3,   3},
	                {2,   2,   4,   5,   5,   2,   4,   4,   3,   4},
	                {3,   4,   3,   2,   5,   4,   3,   1,   4,   2},
	                {3,   1,   1,   3,   5,   4,   3,   1,   4,   5},
	                {1,   2,   4,   4,   1,   3,   2,   4,   2,   1}};

	int resultado[10][10];

	multiplicar(resultado, m0, m1, 10);
	testar(resultado[0][0], 112);
	testar(resultado[0][1], 94);
	testar(resultado[0][2], 94);
	testar(resultado[0][3], 107);
	testar(resultado[0][4], 121);
	testar(resultado[0][5], 102);
	testar(resultado[0][6], 97);
	testar(resultado[0][7], 103);
	testar(resultado[0][8], 121);
	testar(resultado[0][9], 84);
	testar(resultado[1][0], 92);
	testar(resultado[1][1], 84);
	testar(resultado[1][2], 83);
	testar(resultado[1][3], 82);
	testar(resultado[1][4], 88);
	testar(resultado[1][5], 93);
	testar(resultado[1][6], 68);
	testar(resultado[1][7], 92);
	testar(resultado[1][8], 100);
	testar(resultado[1][9], 71);
	testar(resultado[2][0], 71);
	testar(resultado[2][1], 69);
	testar(resultado[2][2], 79);
	testar(resultado[2][3], 70);
	testar(resultado[2][4], 82);
	testar(resultado[2][5], 79);
	testar(resultado[2][6], 64);
	testar(resultado[2][7], 73);
	testar(resultado[2][8], 83);
	testar(resultado[2][9], 65);
	testar(resultado[3][0], 91);
	testar(resultado[3][1], 107);
	testar(resultado[3][2], 109);
	testar(resultado[3][3], 87);
	testar(resultado[3][4], 109);
	testar(resultado[3][5], 96);
	testar(resultado[3][6], 80);
	testar(resultado[3][7], 97);
	testar(resultado[3][8], 101);
	testar(resultado[3][9], 73);
	testar(resultado[4][0], 109);
	testar(resultado[4][1], 100);
	testar(resultado[4][2], 100);
	testar(resultado[4][3], 112);
	testar(resultado[4][4], 123);
	testar(resultado[4][5], 99);
	testar(resultado[4][6], 96);
	testar(resultado[4][7], 117);
	testar(resultado[4][8], 117);
	testar(resultado[4][9], 84);
	testar(resultado[5][0], 54);
	testar(resultado[5][1], 55);
	testar(resultado[5][2], 60);
	testar(resultado[5][3], 59);
	testar(resultado[5][4], 53);
	testar(resultado[5][5], 54);
	testar(resultado[5][6], 49);
	testar(resultado[5][7], 56);
	testar(resultado[5][8], 60);
	testar(resultado[5][9], 41);
	testar(resultado[6][0], 98);
	testar(resultado[6][1], 82);
	testar(resultado[6][2], 88);
	testar(resultado[6][3], 108);
	testar(resultado[6][4], 98);
	testar(resultado[6][5], 91);
	testar(resultado[6][6], 86);
	testar(resultado[6][7], 105);
	testar(resultado[6][8], 108);
	testar(resultado[6][9], 74);
	testar(resultado[7][0], 83);
	testar(resultado[7][1], 82);
	testar(resultado[7][2], 78);
	testar(resultado[7][3], 85);
	testar(resultado[7][4], 81);
	testar(resultado[7][5], 73);
	testar(resultado[7][6], 73);
	testar(resultado[7][7], 78);
	testar(resultado[7][8], 93);
	testar(resultado[7][9], 63);
	testar(resultado[8][0], 108);
	testar(resultado[8][1], 100);
	testar(resultado[8][2], 92);
	testar(resultado[8][3], 92);
	testar(resultado[8][4], 121);
	testar(resultado[8][5], 105);
	testar(resultado[8][6], 89);
	testar(resultado[8][7], 91);
	testar(resultado[8][8], 116);
	testar(resultado[8][9], 82);
	testar(resultado[9][0], 72);
	testar(resultado[9][1], 66);
	testar(resultado[9][2], 81);
	testar(resultado[9][3], 86);
	testar(resultado[9][4], 84);
	testar(resultado[9][5], 73);
	testar(resultado[9][6], 73);
	testar(resultado[9][7], 83);
	testar(resultado[9][8], 84);
	testar(resultado[9][9], 64);


}

